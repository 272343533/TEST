using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace CSharpCallPython
{
    public class CallCmd
    {
        /// <summary>
        /// 调用cmd命令
        /// </summary>
        /// <param name="program"></param>
        /// <param name="cmd"></param>
        /// <returns></returns>
        public static string run_cmd(string program, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.Arguments = cmd;
            start.UseShellExecute = false;          // Do not use OS shell
            start.CreateNoWindow = true;            // We don't need new window
            start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
            start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = process.StandardError.ReadToEnd();
                    if (result == null || result == "")
                    {
                        result = reader.ReadToEnd();
                    }
                    return result;
                }
            }
        }



        /// <summary>
        /// 动态输出
        /// </summary>
        /// <param name="name">文件名</param>
        /// <param name="args">参数</param>
        public static void RunPythonScript(string path, List<string> args)
        {
            
            args = new List<string>() { "3", "5", "1" };
            
            // 要执行.py文件的绝对路径
            path = @"E:\MyGit\TEST\CSharpCallPython\bin\Debug\test5.py";

            // 添加参数
            string arguments = path;
            foreach (var item in args)
                arguments += " " + item;
            
            Process p = new Process();
            // python安装路径
            p.StartInfo.FileName = @"python.exe";
            p.StartInfo.Arguments = arguments;//参数以空格分隔，如果某个参数为空，可以传入""
            p.StartInfo.UseShellExecute = false;// 不启用shell启动进程
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardError = true;
            p.StartInfo.CreateNoWindow = true;// 不创建新窗口
            p.Start();
            
            StreamReader sr = p.StandardOutput;
            while (!sr.EndOfStream)
            {
                Console.WriteLine(sr.ReadLine());
                Thread.Sleep(5000);
            }
            Console.ReadLine();
            p.WaitForExit();//关键，等待外部程序退出后才能往下执行
        }



        /// <summary>
        /// 动态输出
        /// </summary>
        /// <param name="name"></param>
        /// <param name="args"></param>
        /// <param name="args1">不缓存信息</param>
        public static void RunPythonScript2(string name, List<string> args, string args1 = "-u")
        {
            args = new List<string>() { "3", "5", "1" };
            // 要执行.py文件的绝对路径
            string path = @"E:\MyGit\TEST\CSharpCallPython\bin\Debug\test5.py";

            // 添加参数
            string arguments = path;
            foreach (var item in args)
                arguments += " " + item;

            if (args1.Length > 0)
            {
                arguments += " " + args1;
            }

            Process p = new Process();
            // python安装路径,环境变量
            p.StartInfo.FileName = @"python.exe";
            p.StartInfo.Arguments = arguments;//参数以空格分隔，如果某个参数为空，可以传入""
            p.StartInfo.UseShellExecute = false;// 不启用shell启动进程
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardError = true;
            p.StartInfo.CreateNoWindow = true;// 不创建新窗口
            p.Start();
            
            p.BeginOutputReadLine();
            p.OutputDataReceived += new DataReceivedEventHandler(p_OutputDataReceived);
            Console.ReadLine();
            p.WaitForExit();
        }
        
        //输出打印的信息
        static void p_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            if (!string.IsNullOrEmpty(e.Data))
            {
                Console.WriteLine(e.Data + Environment.NewLine);
            }
            Thread.Sleep(5000);
        }


        public static string run_cmd1()
        {
            Process p = new Process();
            string output = string.Empty;
            try
            {
                p.StartInfo.FileName = "python.exe"; //这样来调用python，需要将python加入Path环境变量内
                p.StartInfo.Arguments = @"E:\MyGit\TEST\CSharpCallPython\bin\Debug\test4.py";
                p.StartInfo.UseShellExecute = false;        //是否使用操作系统shell启动
                p.StartInfo.RedirectStandardInput = true;   //接受来自调用程序的输入信息
                p.StartInfo.RedirectStandardOutput = true;  //由调用程序获取输出信息
                p.StartInfo.RedirectStandardError = true;   //重定向标准错误输出
                p.StartInfo.CreateNoWindow = true;          //不显示程序窗口
                p.Start();//启动程序
                p.StandardInput.AutoFlush = true;
                //获取输出信息
                output = p.StandardOutput.ReadToEnd();
                p.WaitForExit();//等待程序执行完退出进程
                return output;
            }
            catch (Exception e)
            {
                return e.ToString();
            }
            finally
            {
                p.Close();
            }
        }

    }
}
