using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpCallPython
{
    class Program
    {
        static void Main(string[] args)
        {
            Program p = new Program();
            //string result = p.runPython("E:\\MyGit\\TEST\\CSharpCallPython\\bin\\Debug\\test2.py", "\"Form C#:\"");
            string result = p.runPyFunc(@"E:\\MyGit\\TEST\\CSharpCallPython\\bin\\Debug\\", "test2", "add", "3,4");
            //string result = p.run_cmd("ping.exe", "8.8.8.8 -n 2");
            //string result = p.run_cmd("ipconfig ", "");
            Console.WriteLine(result);
            Console.ReadKey();



            #region 调用python脚本、传参
            ScriptEngine pyEngine = Python.CreateEngine();//创建Python解释器对象
            dynamic py = pyEngine.ExecuteFile(@"test1.py");//读取脚本文件
            string dd = py.fun("1234");//调用脚本文件中对应的函数
            Console.WriteLine(dd);
            Console.ReadLine();
            #endregion


            #region 动态执行输入的python语句
            ScriptEngine pyEngine1 = Python.CreateEngine();//创建一个Python引擎
            string str = "print(1+2+3)";
            dynamic da = pyEngine1.CreateScriptSourceFromString(str);//读取脚本源码字符串
            da.Execute();//执行脚本;winForm程序中执行结果会在输出中显示;控制台程序中执行结果会显示在控制台中
            string a = Console.ReadLine();
            #endregion
        }

        /// <summary>
        /// 调用cmd命令
        /// </summary>
        /// <param name="program"></param>
        /// <param name="cmd"></param>
        /// <returns></returns>
        public string run_cmd(string program, string cmd)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = program;
            start.Arguments = cmd;
            start.UseShellExecute = false;          // Do not use OS shell
            start.CreateNoWindow = true;            // We don't need new window
            start.RedirectStandardOutput = true;    // Any output, generated by application will be redirected back
            start.RedirectStandardError = true;     // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string result = process.StandardError.ReadToEnd();
                    if (result == null || result == "")
                    {
                        result = reader.ReadToEnd();
                    }
                    return result;
                }
            }
        }

        /// <summary>
        /// 执行现有的python脚本文件,可传参
        /// </summary>
        /// <param name="filename"></param>
        /// <param name="cmd"></param>
        /// <returns></returns>
        public string runPython(string filename, string cmd)
        {
            string cmd1 = string.Format("{0} {1}", filename, cmd);
            return run_cmd("python.exe", cmd1);
        }

        /// <summary>
        /// 动态生成python脚本语句
        /// </summary>
        /// <param name="path"></param>
        /// <param name="filename"></param>
        /// <param name="functionname"></param>
        /// <param name="parameter"></param>
        /// <returns></returns>
        public string runPyFunc(string path, string filename, string functionname, string parameter)
        {
            string cmd = string.Format("-c \"import sys;sys.path.append('{0}');import {1};print({1}.{2}({3}))\"", path, filename, functionname, parameter);
            cmd = string.Format("-c \"import sys;print(sys.path);\"");
            return run_cmd("python.exe", cmd);
        }
    }
}
