from pandas import DataFrame
from pandas import concat
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
# 创建一个0.1~0.9的序列：[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
length = 10
sequence = [i/float(length) for i in range(length)]
print(sequence)
# 构建一个X->y的映射关系
"""DataFrame方法可以把一个数组序列转换成一个有序编码的矩阵序列
     0
0  0.0
1  0.1
2  0.2
3  0.3
4  0.4
5  0.5
6  0.6
7  0.7
8  0.8
9  0.9
"""
df = DataFrame(sequence)
print(df)
"""concat是一个链接方法，将多个df序列合并成一个集合，axis=1表示对列操作(拼接成多列)，axis=0表示对行操作(拼接成一列多行)
DataFrame.shift是一个位移函数，df.shift(1)就相当于将“当前”df序列向下整体移动一位，第一位用NAN值补上。
shift(1)将当前列向下移动，shift(-1)向上移动
     0    0
0  NaN  0.0
1  0.0  0.1
2  0.1  0.2
3  0.2  0.3
4  0.3  0.4
5  0.4  0.5
6  0.5  0.6
7  0.6  0.7
8  0.7  0.8
9  0.8  0.9
"""
df = concat([df.shift(1), df], axis=1)
print(df)
"""删除数据中为NAN的数据
     0    0
1  0.0  0.1
2  0.1  0.2
3  0.2  0.3
4  0.3  0.4
5  0.4  0.5
6  0.5  0.6
7  0.6  0.7
8  0.7  0.8
9  0.8  0.9
"""
df.dropna(inplace=True)
print(df)
# 使用reshape方法，把序列转换为LSTM可识别的数组格式
"""df.values，将df这个矩阵序列中的有用值提取出来，变成一个二维的数组数据
[[0.  0.1]
 [0.1 0.2]
 [0.2 0.3]
 [0.3 0.4]
 [0.4 0.5]
 [0.5 0.6]
 [0.6 0.7]
 [0.7 0.8]
 [0.8 0.9]]
"""
values = df.values
print(values)
"""values[:, 0]是将数组中第0列的所有行提取，赋值给X，values[:, 1]则是获取第1列
[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8]
(9,)
"""
X, y = values[:, 0], values[:, 1]
print(X)
print(X.shape)
"""pandas.reshape将一个一维数组转换成一个三维的数据类型，神经网络的输入数据都是三维的
[[[0. ]]
 [[0.1]]
 [[0.2]]
 [[0.3]]
 [[0.4]]
 [[0.5]]
 [[0.6]]
 [[0.7]]
 [[0.8]]]
 (9, 1, 1)
 (9, 1, 1)代表9个样本，每个样本步长为1，并且有1个特征值,
 三个参数相乘要等于总元素数：9*1*1 = 9，否则报错
 """
X = X.reshape(len(X), 1, 1)
print(X.shape)
print(X)

"""pandas.reshape将一个一维数组转换成一个二维的数据类型
[[0.  0.1 0.2]
 [0.3 0.4 0.5]
 [0.6 0.7 0.8]]
 (3，3) 2个参数相乘要等于总元素数：3*3 = 9，否则报错
 """
X = X.reshape(3, 3)
print(X.shape)
print(X)

"""
重塑前：
[[0.  0.1]
 [0.1 0.2]
 [0.2 0.3]
 [0.3 0.4]
 [0.4 0.5]
 [0.5 0.6]
 [0.6 0.7]
 [0.7 0.8]
 [0.8 0.9]]
重塑后：(6, 1, 3)，元素个数满足6*1*3=18
分6个样本组，每个样本组步长为1，特征为3
[[[0.  0.1 0.1]]

 [[0.2 0.2 0.3]]

 [[0.3 0.4 0.4]]

 [[0.5 0.5 0.6]]

 [[0.6 0.7 0.7]]

 [[0.8 0.8 0.9]]]
"""
print(values)
values = values.reshape(6, 1, 3)
print(values.shape)
print(values)

"""
重塑前：
[[0.  0.1]
 [0.1 0.2]
 [0.2 0.3]
 [0.3 0.4]
 [0.4 0.5]
 [0.5 0.6]
 [0.6 0.7]
 [0.7 0.8]
 [0.8 0.9]]
重塑后：(6, 3, 1)，元素个数满足6*3*1=18
分6个样本组，每个样本组步长为3，特征为1

[[[0. ]
  [0.1]
  [0.1]]

 [[0.2]
  [0.2]
  [0.3]]

 [[0.3]
  [0.4]
  [0.4]]

 [[0.5]
  [0.5]
  [0.6]]

 [[0.6]
  [0.7]
  [0.7]]

 [[0.8]
  [0.8]
  [0.9]]]
"""
print(values)
values = values.reshape(6, 3, 1)
print(values.shape)
print(values)

"""
重塑前：
[[0.  0.1]
 [0.1 0.2]
 [0.2 0.3]
 [0.3 0.4]
 [0.4 0.5]
 [0.5 0.6]
 [0.6 0.7]
 [0.7 0.8]
 [0.8 0.9]]
重塑后：(3, 3, 2)，元素个数满足3*3*2=18
分3个样本组，每个样本组步长为3，特征为2
[[[0.  0.1]
  [0.1 0.2]
  [0.2 0.3]]

 [[0.3 0.4]
  [0.4 0.5]
  [0.5 0.6]]

 [[0.6 0.7]
  [0.7 0.8]
  [0.8 0.9]]]
"""
print(values)
values = values.reshape(3, 3, 2)
print(values.shape)
print(values)